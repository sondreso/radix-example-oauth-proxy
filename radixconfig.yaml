apiVersion: radix.equinor.com/v1
kind: RadixApplication
metadata:
  name: si-pillars
spec:
  environments:
    - name: prod
      build:
        from: master
  components:
    # authenticate user using openid connect 
    # and perform oauth authorization code grant type - see https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type
    # to gain access token that can be used to call API
    # offline_access scope grants a refresh token: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow#successful-response-1
    - name: auth-proxy
      image: quay.io/pusher/oauth2_proxy:v4.0.0
      publicPort: http
      secrets:
        - OAUTH2_PROXY_CLIENT_SECRET # client secret for the UI. Application exist under Azure Active Directory -> App registration
        - OAUTH2_PROXY_COOKIE_SECRET # a secret key used to encrypt the auth tokens sent to browser in cookie 
      ports:
        - name: http
          port: 8000
      variables:
        OAUTH2_PROXY_PROVIDER: "oidc" # https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc
        OAUTH2_PROXY_OIDC_ISSUER_URL: "https://login.microsoftonline.com/3aa4a235-b6e2-48d5-9195-7fcf05b459b0/v2.0" # the UID points to Equinors AzureAd tenant
        # OAUTH2_PROXY_SCOPE: "openid email offline_access" # Simplified scope - If api is not public, and you only want to authenticate the client
        OAUTH2_PROXY_UPSTREAMS: "http://frontend:8001" # where authenticated requests are routed to
        OAUTH2_PROXY_HTTP_ADDRESS: "http://:8000"
        OAUTH2_PROXY_SESSION_STORE_TYPE: "redis" # We're using Redis for storing session info instead of cookies (cookies get too big for Edge and Safari)
        OAUTH2_PROXY_REDIS_CONNECTION_URL: "redis://auth-state:6379" # Where to store session info (the auth-state component)
        OAUTH2_PROXY_COOKIE_REFRESH: "60m" # how often should the token be refreshed. Default for azure ad is currently 60m
        OAUTH2_PROXY_EMAIL_DOMAINS: "*"
        OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true" # should the access token be passed upstream (to the server hosting frontend component). Needed so that the API can authorize request. In simplified scope, this can be removed
        OAUTH2_PROXY_PASS_USER_HEADERS: "false"
        OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      environmentConfig:
        - environment: prod
          variables:
            OAUTH2_PROXY_CLIENT_ID: "f639f0cf-c69a-4c2c-8dc4-31918f6c701a" # client id for the UI. Application exist under Azure Active Directory -> App registration
            OAUTH2_PROXY_REDIRECT_URL: "https://si-pillars.app.playground.radix.equinor.com/oauth2/callback"
            OAUTH2_PROXY_SCOPE: "openid email offline_access 30bb41bb-be29-4b10-aef7-f759141b9923/user_impersonation" # UID is resource client id for API. Application exist under Azure Active Directory -> App registration
    # stores encrypted oauth sessions (access tokens)
    - name: auth-state 
      image: redis:5-alpine
      ports:
        - name: redis
          port: 6379
    - name: frontend
      src: frontend
      ports:
        - name: http
          port: 8001
  dnsAppAlias:
    environment: prod
    component: auth-proxy
